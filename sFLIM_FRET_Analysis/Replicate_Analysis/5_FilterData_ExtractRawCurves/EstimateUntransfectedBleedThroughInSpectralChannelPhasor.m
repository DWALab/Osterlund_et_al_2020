function [bleedthrough_polyfit,G_donor,S_donor,unbound_lifetime] = EstimateUntransfectedBleedThroughInSpectralChannelPhasor(donor_filename, mc3_gradient_slope)
%%% Estimate the bleethrough from the donor FLIM channel
%%% into the Acceptor hyperspectral channel for cells expressing Donor labelled proteins
%%% The function also detemines the average phasor coordinate for the untransfected cell 
%%% The average lifetime is also returned for house keeping purposes.
%%% Must have swallawo_csv.mex64 compiled library for rapidly reading CSV files generated by INO FHS analysis
%%% TCSPC experimental conditions on the INO FLIM-HS confocal system


    freq0 = 30.51757e6;
    harmonic = 1;
    freq = harmonic * freq0;        % virtual frequency for higher harmonics
    w = 2 * pi * freq ;

    %%CSV Columns Indecis
    sep = ','; %CSV files are separated by commas
    quote = '"';
    photon_counts_col = 16;
    tcspc_start_col = 19;
    tcspc_end_col = 19 + 400;
    %Get lifetime decays for all ROIs
    col_offset = 43;
    min_photon_counts = 5000; 
    %%Untransfected CSV file
    %%%%%%%%%%%%%%%%%%%%%%Donor Only Data%%%%%%%%%%%%%%%%%%%%%
    [n_don, t_don] = swallow_csv(donor_filename, quote, sep);



    %Lets estimate the bleed through of mCerulean3 into the Hyperspectral
    %Channel
    mc3_photon_counts = n_don(:,photon_counts_col);
    T0_photon_counts = n_don(:,tcspc_start_col+42:tcspc_start_col+44); 
    T0_photon_counts = sum(T0_photon_counts,2); 
    ven_spec_intensity = double(n_don(:,1632));
    roi_area = n_don(:,17); 


    %Use good ROIs to estimate mean G and S phasor paramtersfor donor only
    donor_decays = n_don(:,tcspc_start_col + col_offset: tcspc_end_col);
    [G_don_array, S_don_array] = CalculatePhasorGSForDecayMatrix(donor_decays);



    %Divide by ROI roi to normalize by pixel
    % Time T0 is used to determine the total Donor concentration in each ROI
    ven_spec_intensity = ven_spec_intensity ./ roi_area; 
    mc3_photon_counts = mc3_photon_counts ./ roi_area; 
    T0_photon_counts = T0_photon_counts ./ roi_area; 
    mc3_concentration = T0_photon_counts * mc3_gradient_slope;

    %We only look at RIOs where average protein concentration is from 1 to 5 uM
    good_concentration = find(mc3_concentration>=1 & mc3_concentration <= 5) ;

    mc3_photon_counts = mc3_photon_counts(good_concentration ); 
    G_don_array = G_don_array(good_concentration ); 
    S_don_array = S_don_array(good_concentration ); 
    ven_spec_intensity= ven_spec_intensity(good_concentration); 


    G_donor = mean(G_don_array);
    S_donor = mean(S_don_array);

    unbound_lifetime =  S_donor / (harmonic * w * G_donor);
    unbound_lifetime = unbound_lifetime * 1e12;

    %Remove any NaN generated from noise
    mc3_photon_counts(isnan(mc3_photon_counts))= 0 ;
    ven_spec_intensity(isnan(ven_spec_intensity)) = 0; 

    %%linear fitting is used to estimate the bleed through in to the venus channel
    bleedthrough_polyfit= polyfit(mc3_photon_counts,ven_spec_intensity,1);



end
